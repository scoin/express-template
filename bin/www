#!/usr/bin/env node

/**
 * Module dependencies.
 */

var path = require("path");
var EventEmitter = require('events');

//------------------------------------------------
console.log("STARTING UP")
console.log("INITIALIZING CONFIG VARS")
//------------------------------------------------
var envConfig = require(path.normalize(__dirname + "/../config/env.js"));
var nconf = require("nconf");

if(process.env.NODE_ENV in envConfig){
    nconf.defaults(envConfig[process.env.NODE_ENV]);
} else {
    nconf.defaults(envConfig.development);
}

//------------------------------------------------
console.log("INITIALIZING GLOBALS")
//------------------------------------------------
var globalsHandler = require(path.normalize(__dirname + "/../config/globals.js"));
var globalInit = require(path.normalize(__dirname + "/../config/globalInit.js"));
var initServices = require(path.normalize(__dirname + "/../setup/initServices.js"));

globalInit(function(initializedGlobals){
    if(!initializedGlobals){
        initializedGlobals = {};
    }
    if(typeof initializedGlobals !== "object" || initializedGlobals instanceof Array){
        throw "Initialized Globals must be a plain object."
    }

//------------------------------------------------
    for(var key in initializedGlobals){
        console.log(key)
    }
//------------------------------------------------

    globalsHandler.set(initializedGlobals);

    initServices();

    var globals = globalsHandler.get();

    var app = require('../app');
    var debug = require('debug')('express-template:server');
    var http = require('http');

    var hostname = "0.0.0.0";


    var startup = require(path.normalize(__dirname + "/../config/startup")).bind(globals);
    var afterStart = require(path.normalize(__dirname + "/../config/afterStart")).bind(globals);
    var shutdown = require(path.normalize(__dirname + "/../config/shutdown")).bind(globals);

    /**
    * Get port from environment and store in Express.
    */

    var port = normalizePort(process.env.PORT || '3000');
    app.set('port', port);

    /**
    * Create HTTP server.
    */

    var server = http.createServer(app);

    /**
    * Listen on provided port, on all network interfaces.
    */

    startup(function(err){
        if(err){
          throw err;
        }
        console.log(globals)
        startServer(server, port, hostname, {
            afterStart: afterStart,
            shutdown: shutdown
        });
    })
})

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
}

function startServer(server, port, hostname, callbacks){
    var serverStatus = new EventEmitter();

    serverStatus.on("start", function(){

        server.listen(port, hostname);
        server.on('error', onError);
        server.on('listening', onListening);

    })

    serverStatus.on("started", function(bind){

        onClose(callbacks.shutdown)

        callbacks.afterStart(server.address(), bind)
    })

    function onError(error) {

        if (error.syscall !== 'listen') {
          throw error;
        }

        // handle specific listen errors with friendly messages
        switch (error.code) {
          case 'EACCES':
            console.error("PORT" + ' requires elevated privileges');
            process.exit(1);
            break;
          case 'EADDRINUSE':
            console.error("Port " + port + ' is already in use');
            port += 1;
            server.removeListener("error", onError);
            server.removeListener("listening", onListening);
            serverStatus.emit("start");
            break;
          default:
            throw error;
        }
    }

    function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string'
          ? 'pipe ' + addr
          : 'port ' + addr.port;
        console.log('Listening on ' + bind);
        serverStatus.emit("started", bind);
    }

    function onClose(cb){

        process.on("exit", function(){
            cb()
        })
        process.on("SIGTERM", function(){
            process.exit(1);
        })
        process.on("SIGINT", function(){
            process.exit(1);
        })

    }

    serverStatus.emit("start");
}
